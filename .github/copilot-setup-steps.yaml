name: Copilot Setup Steps

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg portaudio19-dev python3-pyaudio
        
    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
        
    - name: Upgrade pip and install build tools
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        
    - name: Install project dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Install development dependencies
      run: |
        pip install pytest pytest-cov black isort flake8 pylint mypy
        pip install streamlit-testing jupyter nbconvert
        
    - name: Set up environment variables
      run: |
        echo "STREAMLIT_SERVER_PORT=8501" >> $GITHUB_ENV
        echo "STREAMLIT_SERVER_HEADLESS=true" >> $GITHUB_ENV
        echo "STREAMLIT_BROWSER_GATHER_USAGE_STATS=false" >> $GITHUB_ENV
        
    - name: Create config directories
      run: |
        mkdir -p ~/.streamlit
        mkdir -p data/processed data/external models
        
    - name: Configure Streamlit
      run: |
        cat > ~/.streamlit/config.toml << EOF
        [server]
        headless = true
        port = 8501
        enableCORS = false
        enableXsrfProtection = false
        
        [browser]
        gatherUsageStats = false
        
        [theme]
        base = "light"
        EOF
        
    - name: Validate project structure
      run: |
        echo "Checking project structure..."
        test -f app.py
        test -d pages
        test -d email_generator
        test -d learnbot
        test -d data
        test -d notebooks
        test -d tests
        echo "âœ“ Project structure validated"
        
    - name: Check Python imports
      run: |
        echo "Validating Python imports..."
        python -c "import streamlit; print(f'Streamlit version: {streamlit.__version__}')"
        python -c "import openai; print(f'OpenAI version: {openai.__version__}')"
        python -c "import langchain; print(f'LangChain version: {langchain.__version__}')"
        python -c "import numpy; print(f'NumPy version: {numpy.__version__}')"
        echo "âœ“ Core dependencies imported successfully"
        
    - name: Run syntax checks
      run: |
        echo "Running syntax validation..."
        python -m py_compile app.py
        python -m py_compile email_generator/*.py
        python -m py_compile learnbot/*.py
        find pages -name "*.py" -exec python -m py_compile {} \;
        echo "âœ“ Python syntax validation passed"
        
    - name: Code formatting check
      run: |
        echo "Checking code formatting with black..."
        black --check --diff .
        echo "âœ“ Code formatting validated"
        
    - name: Import sorting check
      run: |
        echo "Checking import sorting with isort..."
        isort --check-only --diff .
        echo "âœ“ Import sorting validated"
        
    - name: Linting with flake8
      run: |
        echo "Running flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        echo "âœ“ Linting completed"
        
    - name: Type checking with mypy
      run: |
        echo "Running type checking..."
        mypy --install-types --non-interactive --ignore-missing-imports app.py || true
        mypy --install-types --non-interactive --ignore-missing-imports email_generator/ || true
        echo "âœ“ Type checking completed"
        
    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        python -m pytest tests/ -v --tb=short || true
        echo "âœ“ Unit tests completed"
        
    - name: Test Streamlit app startup
      run: |
        echo "Testing Streamlit app startup..."
        timeout 30s streamlit run app.py --server.headless true --server.port 8501 &
        sleep 10
        curl -f http://localhost:8501/_stcore/health || echo "App startup test completed"
        pkill -f streamlit || true
        echo "âœ“ Streamlit startup test completed"
        
    - name: Validate notebooks
      run: |
        echo "Validating Jupyter notebooks..."
        find notebooks -name "*.ipynb" -exec jupyter nbconvert --to script --stdout {} \; > /dev/null || true
        echo "âœ“ Notebook validation completed"
        
    - name: Setup summary
      run: |
        echo "ðŸŽ‰ Copilot Setup Complete!"
        echo ""
        echo "Project: EmailTemplatesGen"
        echo "Language: Python $(python --version | cut -d' ' -f2)"
        echo "Framework: Streamlit $(python -c 'import streamlit; print(streamlit.__version__)')"
        echo "AI/ML: OpenAI + LangChain"
        echo "Integration: Microsoft Outlook + SharePoint"
        echo ""
        echo "Key Features Ready:"
        echo "âœ“ Email template generation with NLP"
        echo "âœ“ Streamlit multi-page interface"
        echo "âœ“ Voice integration capabilities"
        echo "âœ“ RAG pipeline for intelligent responses"
        echo "âœ“ Outlook and SharePoint connectivity"
        echo ""
        echo "Development Environment Configured:"
        echo "âœ“ Python virtual environment"
        echo "âœ“ All dependencies installed"
        echo "âœ“ Code quality tools ready"
        echo "âœ“ Testing framework setup"
        echo "âœ“ Streamlit configuration applied"
        echo ""
        echo "Ready for development! ðŸš€"
